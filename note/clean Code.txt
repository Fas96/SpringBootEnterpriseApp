Writing clean code is what you must do in order to call yourself a professional.
There is no reasonable excuse for doing anything less than your best.
-------------------------------------------------------------------------------

Bad Code
--------
 LeBlanc’s law: Later equals never

 The Total Cost of Owning a Mess
 -------------------------------


Meaningful Names

int d; // elapsed time in days
comment on names to describe its intent if necessary
------------------------
int elapsedTimeInDays;
int daysSinceCreation;
int daysSinceModification;
int fileAgeInDays;

bad naming
What is the purpose of this code?
---------------------------------
 public List<int[]> getThem() {
 List<int[]> list1 = new ArrayList<int[]>();
 for (int[] x : theList)
 if (x[0] == 4)
 list1.add(x);
 return list1;
 }
---------------------------------
Why is it hard to tell what this code is doing?


:::::::::::::::::::::::::::::::::::::::::
     public List<int[]> getFlaggedCells() {
     List<int[]> flaggedCells = new ArrayList<int[]>();
     for (int[] cell : gameBoard)
        if (cell[STATUS_VALUE] == FLAGGED)
            flaggedCells.add(cell);
     return flaggedCells;
     }
Notice that the simplicity of the code has not changed
----------------

It can include an intention-revealing function (call it isFlagged) to hide the magic numbers.
It results in a new version of the function:
     public List<Cell> getFlaggedCells() {
     List<Cell> flaggedCells = new ArrayList<Cell>();
     for (Cell cell : gameBoard)
         if (cell.isFlagged())
            flaggedCells.add(cell);
     return flaggedCells;
     }
With these simple name changes, it’s not difficult to understand what’s going on. This is
the power of choosing good names.
----------------------------------------
There is an application we know of where this is illustrated. we’ve changed the names

to protect the guilty, but here’s the exact form of the error:
    getActiveAccount();
    getActiveAccounts();
    getActiveAccountInfo();
How are the programmers in this project supposed to know which of these functions to call?
In the absence of specific conventions, the variable moneyAmount is indistinguishable
from money, customerInfo is indistinguishable from customer, accountData is indistinguishable from account, and theMessage is indistinguishable from message. Distinguish names in
such a way that the reader knows what the differences offer.


:::::::::::::::::::::::::::::::::::::::::::::
Compare
    class DtaRcrd102 {
    private Date genymdhms;
    private Date modymdhms;
    private final String pszqint = "102";
    /* ... */
    };
to
    class Customer {
    private Date generationTimestamp;
    private Date modificationTimestamp;;
    private final String recordId = "102";
    /* ... */
    };
:::::::::::::::::::::::::::::::::::::::::::::
[N5]. If a variable or constant might be seen or used in multiple places in a body of code,
it is imperative to give it a search-friendly name. Once again compare
    for (int j=0; j<34; j++) {
    s += (t[j]*4)/5;
    }
to
    int realDaysPerIdealDay = 4;
    const int WORK_DAYS_PER_WEEK = 5;
    int sum = 0;
    for (int j=0; j < NUMBER_OF_TASKS; j++) {
        int realTaskDays = taskEstimate[j] * realDaysPerIdealDay;
        int realTaskWeeks = (realdays / WORK_DAYS_PER_WEEK);
        sum += realTaskWeeks;
    }
Note that sum, above, is not a particularly useful name but at least is searchable.

:::::::::::::::::::::::::::::::::::::::::::
Interfaces and Implementations
These are sometimes a special case for encodings. For example, say you are building an
ABSTRACT FACTORY for the creation of shapes. This factory will be an interface and will
be implemented by a concrete class. What should you name them? IShapeFactory and
ShapeFactory? I prefer to leave interfaces unadorned. The preceding I, so common in
today’s legacy wads, is a distraction at best and too much information at worst. I don’t
want my users knowing that I’m handing them an interface. I just want them to know that
it’s a ShapeFactory. So if I must encode either the interface or the implementation, I choose
the implementation. Calling it ShapeFactoryImp, or even the hideous CShapeFactory, is preferable to encoding the interface.

::::::::::::::::::::::::::::::::::::::::::
Class Names
Classes and objects should have noun or noun phrase names like Customer, WikiPage,
Account, and AddressParser. Avoid words like Manager, Processor, Data, or Info in the name
of a class. A class name should not be a verb.

::::::::::::::::::::::::::::::::::::::::::
Method Names
Methods should have verb or verb phrase names like postPayment, deletePage, or save.
Accessors, mutators, and predicates should be named for their value and prefixed with get,
set, and is according to the javabean standard.4
    string name = employee.getName();
    customer.setName("mike");
    if (paycheck.isPosted())...
When constructors are overloaded, use static factory methods with names that
describe the arguments. For example,

    Complex fulcrumPoint = Complex.FromRealNumber(23.0);
is generally better than
    Complex fulcrumPoint = new Complex(23.0);
Consider enforcing their use by making the corresponding constructors private.

:::::::::::::::::::::::::::::::::::::::::
Payroll.java
    public Money calculatePay(Employee e)
        throws InvalidEmployeeType {
             switch (e.type) {
                case COMMISSIONED:
                    return calculateCommissionedPay(e);
                case HOURLY:
                    return calculateHourlyPay(e);
                case SALARIED:
                    return calculateSalariedPay(e);
                default:
                    throw new InvalidEmployeeType(e.type);
         }
     }



   :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
   UserValidator.java
   public class UserValidator {
        private Cryptographer cryptographer;
            public boolean checkPassword(String userName, String password) {
                User user = UserGateway.findByName(userName);
                if (user != User.NULL) {
                    String codedPhrase = user.getPhraseEncodedByPassword();
                    String phrase = cryptographer.decrypt(codedPhrase, password);
                if ("Valid Password".equals(phrase)) {
                    Session.initialize();
                    return true;
                }
            }
            return false;
        }
   }
   The side effect is the call to Session.initialize(), of course.
   The checkPassword function, by its name, says that it checks the password.
    The name does not imply that it initializes the session.
   :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
   On the other hand, if you use exceptions instead of returned error codes, then the error
   processing code can be separated from the happy path code and can be simplified:
   try {
       deletePage(page);
       registry.deleteReference(page.name);
       configKeys.deleteKey(page.name.makeKey());
       }
       catch (Exception e) {
       logger.log(e.getMessage());
   }
   :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
Prefer Exceptions to Returning Error Codes 47
     public void delete(Page page) {
         try {
            deletePageAndAllReferences(page);
              }  catch (Exception e) {
             logError(e);

             }
         }

         private void deletePageAndAllReferences(Page page) throws Exception {
             deletePage(page);
             registry.deleteReference(page.name);
             configKeys.deleteKey(page.name.makeKey());
         }

         private void logError(Exception e) {
            logger.log(e.getMessage());
            }
In the above, the delete function is all about error processing. It is easy to understand
and then ignore.


----------------------------------------------------------------
    MockRequest request;
    private final String HTTP_DATE_REGEXP =
     "[SMTWF][a-z]{2}\\,\\s[0-9]{2}\\s[JFMASOND][a-z]{2}\\s"+
     "[0-9]{4}\\s[0-9]{2}\\:[0-9]{2}\\:[0-9]{2}\\sGMT";
    private Response response;
    private FitNesseContext context;
    private FileResponder responder;
    private Locale saveLocale;
    // Example: "Tue, 02 Apr 2003 22:18:49 GMT"
Other instance variables that were probably added later were interposed between the
HTTP_DATE_REGEXP constant and it’s explanatory comment.
----------------------------------------------------------------
Comments Do Not Make Up for Bad Code
----------------------------------------------------------------
This:
// Check to see if the employee is eligible for full benefits
    if ((employee.flags & HOURLY_FLAG) &&
     (employee.age > 65))
Or this?
    if (employee.isEligibleForFullBenefits())
It takes only a few seconds of thought to explain most of your intent in code.

----------------------------------------------------------------
For example, consider this comment that explains the return value of an abstract method:
// Returns an instance of the Responder being tested.
protected abstract Responder responderInstance();
A comment like this can sometimes be useful, but it is better to use the name of the function to convey the information where possible. For example, in this case the comment
could be made redundant by renaming the function: responderBeingTested.

Here’s a case that’s a bit better:
// format matched kk:mm:ss EEE, MMM dd, yyyy
Pattern timeMatcher = Pattern.compile(
 "\\d*:\\d*:\\d* \\w*, \\w* \\d*, \\d*");

 In this case the comment lets us know that the regular expression is intended to match a
 time and date that were formatted with the SimpleDateFormat.format function using the
 specified format string.
----------------------------------------------------------------

Warning of Consequences
:::::::::::::::::::::::
:Sometimes it is useful to warn other programmers about certain consequences.
// Don't run unless you
// have some time to kill.
public void _testWithReallyBigFile() {
    writeLinesToFile(10000000);
    response.setBody(testFile);
    response.readyToSend(this);
    String responseString = output.toString();
    assertSubString("Content-Length: 1000000000", responseString);
    assertTrue(bytesSent > 1000000000);
    }


 ------------------------------------------------------------
 Nowadays, of course, we’d turn off the test case by using the @Ignore attribute with an
 appropriate explanatory string. @Ignore("Takes too long to run"). But back in the days
 before JUnit 4, putting an underscore in front of the method name was a common convention. The comment, while flippant, makes the point pretty well.
 Here’s another, more poignant example:
 public static SimpleDateFormat makeStandardHttpDateFormat() {
     //SimpleDateFormat is not thread safe,
     //so we need to create each instance independently.
     SimpleDateFormat df = new SimpleDateFormat("EEE, dd MMM yyyy HH:mm:ss z");
     df.setTimeZone(TimeZone.getTimeZone("GMT"));
     return df;
  }

  ----------------------------------------------------------
  A comment may be used to amplify the importance of something that may otherwise seem
  inconsequential.
          String listItemContent = match.group(3).trim();
          // the trim is real important. It removes the starting
          // spaces that could cause the item to be recognized
          // as another list.
          new ListItemWidget(this, listItemContent, this.level + 1);
          return buildList(text.substring(match.end()));

          -----------------------------------------------
      Consider the following stretch of code:
      // does the module from the global list <mod> depend on the
      // subsystem we are part of?
      if (smodule.getDependSubsystems().contains(subSysMod.getSubSystem()))
      This could be rephrased without the comment as
      ArrayList moduleDependees = smodule.getDependSubsystems();
      String ourSubSystem = subSysMod.getSubSystem();
      if (moduleDependees.contains(ourSubSystem))
      The author of the original code may have written the comment first (unlikely) and then
      written the code to fulfill the comment


      ----------------------
      A cleaner way to use Map might look like the following. No user of Sensors would care
      one bit if generics were used or not. That choice has become (and always should be) an
      implementation detail.
          public class Sensors {
              private Map sensors = new HashMap();
              public Sensor getById(String id) {
              return (Sensor) sensors.get(id);
              }
              //snip
          }

  The interface at the boundary (Map) is hidden. It is able to evolve with very little impact on
  the rest of the application.